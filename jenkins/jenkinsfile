pipeline {
    agent any
    
    environment { 
        PUSH_VERSION = "latest"
        COMPOSE_TAGNAME = 'toeicdoit'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }
    
    stages {
        stage('Github clone') {
            steps {
                git branch: "main", credentialsId: 'github-token', url: "https://github.com/6Whistle/TOEICDOIT_Jenkins_K8S_Publish.git"
            }
        }
        
        stage("Docker Login") {
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage("Java Build") {
            steps {
                script {
                    sh "echo Git Clone SUCCESS"
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean build"
                }
            }
        }
        
        stage("Docker Image Remove") {
            steps {
                sh "docker rmi -f $COMPOSE_TAGNAME/gateway:$PUSH_VERSION"
                sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/gateway:$PUSH_VERSION"
                
                sh "docker rmi -f $COMPOSE_TAGNAME/eureka:$PUSH_VERSION"
                sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/eureka:$PUSH_VERSION"
                
                sh "docker rmi -f $COMPOSE_TAGNAME/user:$PUSH_VERSION"
                sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/user:$PUSH_VERSION"
                
                sh "docker rmi -f $COMPOSE_TAGNAME/chat:$PUSH_VERSION"
                sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/chat:$PUSH_VERSION"
                
                sh "docker rmi -f $COMPOSE_TAGNAME/toeic:$PUSH_VERSION"
                sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/toeic:$PUSH_VERSION"
                
                sh "docker rmi -f $COMPOSE_TAGNAME/tx:$PUSH_VERSION"
                sh "docker rmi -f $DOCKERHUB_CREDENTIALS_USR/tx:$PUSH_VERSION"
            }
        }
        
        stage("Docker Image Build") {
            steps {
                sh "docker compose build"
            }
        }
        
        stage("Docker Image Tag") {
            steps {
                sh "docker image tag $COMPOSE_TAGNAME/gateway:$PUSH_VERSION $DOCKERHUB_CREDENTIALS_USR/gateway:$PUSH_VERSION"
                sh "docker image tag $COMPOSE_TAGNAME/eureka:$PUSH_VERSION $DOCKERHUB_CREDENTIALS_USR/eureka:$PUSH_VERSION"
                sh "docker image tag $COMPOSE_TAGNAME/user:$PUSH_VERSION $DOCKERHUB_CREDENTIALS_USR/user:$PUSH_VERSION"
                sh "docker image tag $COMPOSE_TAGNAME/chat:$PUSH_VERSION $DOCKERHUB_CREDENTIALS_USR/chat:$PUSH_VERSION"
                sh "docker image tag $COMPOSE_TAGNAME/tx:$PUSH_VERSION $DOCKERHUB_CREDENTIALS_USR/tx:$PUSH_VERSION"
                sh "docker image tag $COMPOSE_TAGNAME/toeic:$PUSH_VERSION $DOCKERHUB_CREDENTIALS_USR/toeic:$PUSH_VERSION"
            }
        }
        
        stage("Docker Push") {
            steps {
                sh "docker push $DOCKERHUB_CREDENTIALS_USR/gateway:$PUSH_VERSION"
                sh "docker push $DOCKERHUB_CREDENTIALS_USR/eureka:$PUSH_VERSION"
                sh "docker push $DOCKERHUB_CREDENTIALS_USR/user:$PUSH_VERSION"
                sh "docker push $DOCKERHUB_CREDENTIALS_USR/chat:$PUSH_VERSION"
                sh "docker push $DOCKERHUB_CREDENTIALS_USR/tx:$PUSH_VERSION"
                sh "docker push $DOCKERHUB_CREDENTIALS_USR/toeic:$PUSH_VERSION"
            }
        }
    }
}